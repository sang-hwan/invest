결론부터 말하자면, **지금 구조만으로도 가상 매매(Paper Trading) 자체는 가능**하지만,  
**전략 고도화**를 위해서는 **매매 데이터(기록)를 남기는 로깅/분석 로직**이 추가로 필요합니다.

가상 매매 전략을 장기간 돌리면서 데이터를 쌓아야,  
“어떤 구간에서 잘 됐고, 어떤 구간에서 안 됐는지”를 **피드백**하여 개선할 수 있기 때문이죠.

---

# 1. 왜 매매 기록이 필요한가?

1. **성과 측정(Performance Tracking)**  
   - “일별·주별·월별로 어느 정도 수익이 났나?”  
   - “Drawdown(최대 낙폭)은 얼마였나?”  
   - “실제 매수가/매도가 대비 실현 손익, 수수료 등”

2. **전략 약점 분석**  
   - RSI < 30 매수, 감성 점수 긍정일 때 → 실제로 얼마나 먹었는지?  
   - 감성 점수는 높았는데 결과는 역주행했다면 왜 그랬는지?

3. **장기 백테스트·재현(Replay)**  
   - 가상 매매 시점별 ‘시세’, ‘잔고’, ‘포지션’, ‘매매 이유(로그)’ 등을 남겨두면,  
   - 나중에 “같은 전략 로직”으로 다시 재현(Replay)하거나, 부분적으로 전략 파라미터만 바꿔서 성능을 비교할 수 있음.

---

# 2. 어떤 데이터를 어떻게 저장하면 좋을까?

아래는 **기본적인 로깅 예시**입니다.  
프로그램이 매 분/매 시간마다 루프를 돌 때마다, 혹은 **실제 트레이드가 발생했을 때** **한 줄씩** 저장하면 됩니다.

1. **시점 정보**  
   - 날짜/시간: `datetime.now()` or `time.time()` (Timestamp)

2. **시세 정보**  
   - 현재가(`current_price`), RSI, 감성 점수, etc.

3. **매매 정보** (트레이드 발생 시)  
   - 매매 종류(매수/매도)  
   - 체결 수량, 체결 가격, 체결 금액  
   - 매매 직후 잔고, 포지션

4. **기타**  
   - “매매를 실행한 이유” (RSI가 X 미만, 감성 점수가 Y 이상…)  
   - “감성 점수의 평균은 얼마, 표준편차는 얼마” 같은 지표도 추후 유용

```csv
timestamp, current_price, rsi, sentiment, action, trade_amount, trade_price, balance, position, reason
2025-01-08 12:15:00, 39000000, 28.3, 0.62, buy, 0.005, 39000000, 978000.0, 0.005, "RSI < 30 + Positive sentiment"
2025-01-08 12:16:00, 39200000, 29.1, 0.60, hold, 0.0, 0, 978000.0, 0.005, "no rebalancing needed"
...
```

- **저장 위치**: CSV 파일, SQLite, MySQL 등  
  - 초반엔 **CSV**가 가장 간단합니다.  
  - 나중에 **분석 툴**(Pandas, Excel, Tableau 등)로 쉽게 열어볼 수 있기 때문이죠.

---

# 3. 실제 코드에서 어떻게 추가할까?

예를 들어 `main.py`에 다음과 같은 **간단 로거(함수)**를 하나 만들 수 있습니다:

```python
import csv
import os
from datetime import datetime

# 로그 파일 경로
LOG_FILE = "trade_logs.csv"

def init_csv_file():
    # CSV 헤더가 없으면 만들어준다
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow([
                "timestamp", "current_price", "rsi", "sentiment",
                "action", "trade_amount", "trade_price",
                "balance", "position", "reason"
            ])

def write_trade_log(current_price, rsi, sentiment,
                    action, trade_amount, trade_price,
                    balance, position, reason):
    with open(LOG_FILE, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            current_price,
            rsi,
            sentiment,
            action,
            trade_amount,
            trade_price,
            balance,
            position,
            reason
        ])
```

그리고 매매가 실행되는 지점(예: `paper_trade_rebalance()`에서 **매수/매도** 수행 직후)에 아래처럼 호출합니다:

```python
if diff_value > 0:
    # 매수
    ...
    config.balance -= buy_cost
    config.position += buy_amount

    write_trade_log(
        current_price=current_price,
        rsi=rsi_latest,  # 외부에서 받아오거나 인자로 넘길 수 있음
        sentiment=average_sentiment,
        action="buy",
        trade_amount=buy_amount,
        trade_price=current_price,
        balance=config.balance,
        position=config.position,
        reason="rebalancing to target_ratio + RSI<30 + sentiment>0.5 etc."
    )

else:
    # 매도
    ...
    config.position -= sell_btc_amount
    config.balance += receive_amount

    write_trade_log(
        current_price=current_price,
        rsi=rsi_latest,
        sentiment=average_sentiment,
        action="sell",
        trade_amount=sell_btc_amount,
        trade_price=current_price,
        balance=config.balance,
        position=config.position,
        reason="rebalancing to target_ratio - RSI>70 - sentiment<-0.5 etc."
    )
```

- 이렇게 하면 **각 트레이드 이벤트마다 CSV에 기록**이 쌓이므로,  
  **언제든지 CSV를 열어 보면서** “이 시점에 어떤 이유로 매수/매도 했구나”를 확인할 수 있습니다.

(추가로, 매 분/매 시간마다 **포지션 상태를 로그**로 남기는 방식도 있긴 한데,  
보통 **매매가 발생했을 때** 로그를 많이 남깁니다.)

---

# 4. 쌓인 로그를 활용해 전략 고도화하기

1. **단순 통계 분석**  
   - “한 달간의 매매 기록”을 Pandas DataFrame 등으로 불러와서,  
     - `action` 별 평균 수익,  
     - RSI 구간별 승률,  
     - 감성 점수 구간별 손익률,  
     등을 분석.

2. **부분 전략 수정 & 재현(Replay)**  
   - “RSI 30이 아니라 25로 해봤으면 어땠을까?”  
   - “감성 점수 임계값을 0.5 대신 0.3으로 바꿨다면 매수가 더 많아져서 이익이 늘었을까?”  
   - 로그에 “실행 시점의 시세·지표”와 “결과”가 남아 있으면,  
     각 시점별로 가상의 조건을 달리 적용해볼 수 있음(물론 100%는 아니더라도 참고 가능).

3. **머신러닝 적용**  
   - 일정 기간(예: 3~6개월) 동안 가상 매매를 돌리며 **시세 변동, 보조지표, 감성 점수, 트레이드 결과**를 축적  
   - 이 데이터를 피처(feature)로 삼아, 회귀/분류 모델로 “매매 시점” 예측을 해볼 수도 있음.

4. **레포트/대시보드**  
   - Airflow나 Cron으로 주간/월간 자동 통계를 뽑아서 Slack/메일로 보고받는 식.  
   - 혹은 Streamlit, Grafana 대시보드 등에 연결해서 실시간(가상) 포트폴리오 추적.

---

# 5. 결론적으로…

- **지금 코드**만으로도 `balance`와 `position`을 업데이트하면서 “실시간 Paper Trading”은 가능합니다.  
- 하지만 **전략을 계속 개선**하고 싶다면, **매매 데이터(언제, 왜, 얼마를 매수/매도했는지)**를 **반드시 기록**해야 합니다.  
  - 그래야 나중에 보고 “어디서 잘못됐는지, 뭐가 잘됐는지”를 파악하고 전략 파라미터를 바꿔볼 수 있으니까요.
- 초기엔 **CSV** 형태로 로그만 쌓아도 충분합니다.  
  - CSV → Pandas로 분석 → 전략 개선 → 다시 실행 … 이런 식으로 **반복**하면,  
    점차 **자기만의 노하우**가 쌓이고 **전략 고도화**가 가능해집니다.

정리하자면,  
**“가상 매매 데이터(로그) 누적”** → **“분석”** → **“전략 개선”** → **“다시 테스트”** 흐름만 갖추면,  
지금 구조로도 **충분히 장기적인 전략 고도화**를 해나갈 수 있습니다.  
단, 반드시 **매매 기록 로그**를 남기는 부분을 넣고,  
원하면 **정기 분석(Weekly/Monthly)**도 자동화해보세요.  
그렇게 해야 **실전 투자 대비**로도 큰 도움이 될 것입니다.  